"use strict";(self.webpackChunkfreestyler=self.webpackChunkfreestyler||[]).push([[7518],{"./src/2 HTML Design Patterns/2-07 Terminal Block Elements/__tests__/TerminalBlockElements.int.story.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>TerminalBlockElements_int_story,regular:()=>regular});var defineProperty=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),dist=__webpack_require__("./node_modules/@storybook/addon-jest/dist/index.mjs"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function TerminalBlockElements(){return(0,jsx_runtime.jsxs)("div",{className:"terminal-block-elements",children:[(0,jsx_runtime.jsx)("h1",{children:"Terminal Block Elements"}),(0,jsx_runtime.jsx)("p",{children:"Headings, paragraphs, blockquotes, definition terms, addresses, and table captions are terminal block elements. They may contain only content. An HTML validator will declare a document invalid if you attempt to put block elements inside terminal blocks."}),(0,jsx_runtime.jsx)("blockquote",{children:"A blockquote is a terminal block."}),(0,jsx_runtime.jsxs)("dl",{children:[(0,jsx_runtime.jsx)("dt",{children:"NOTE:"}),(0,jsx_runtime.jsx)("dd",{children:"The content of terminal blocks is always inline."})]}),(0,jsx_runtime.jsx)("address",{children:"An address is a terminal block."}),(0,jsx_runtime.jsxs)("table",{children:[(0,jsx_runtime.jsx)("caption",{children:"Table caption is a terminal block."}),(0,jsx_runtime.jsx)("tr",{children:(0,jsx_runtime.jsx)("td",{})})]})]})}TerminalBlockElements.displayName="TerminalBlockElements",TerminalBlockElements.__docgenInfo={description:"",methods:[],displayName:"TerminalBlockElements"};var _regular$parameters,_regular$parameters2,_regular$parameters2$,_jest_test_results=__webpack_require__("./.jest-test-results.json");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){(0,defineProperty.Z)(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}const TerminalBlockElements_int_story={title:"2 HTML Design Patterns/2-07 Terminal Block Elements",component:TerminalBlockElements,decorators:[(0,dist.x)({results:_jest_test_results})],parameters:{jest:["TerminalBlockElements.int.test.js"]},excludeStories:["custom"]};function regular(){return(0,jsx_runtime.jsx)(TerminalBlockElements,{})}regular.displayName="regular",regular.parameters=_objectSpread(_objectSpread({},regular.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_regular$parameters=regular.parameters)||void 0===_regular$parameters?void 0:_regular$parameters.docs),{},{source:_objectSpread({originalSource:"function regular() {\n  return <TerminalBlockElements />;\n}"},null===(_regular$parameters2=regular.parameters)||void 0===_regular$parameters2||null===(_regular$parameters2$=_regular$parameters2.docs)||void 0===_regular$parameters2$?void 0:_regular$parameters2$.source)})});var __namedExportsOrder=["regular"];regular.__docgenInfo={description:"",methods:[],displayName:"regular"}}}]);